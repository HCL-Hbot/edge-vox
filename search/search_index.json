{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"overview/","title":"Overview","text":"<p>A lightweight C++ client library for real-time voice interaction with AI models running on edge servers. edge-vox enables bidirectional audio streaming and seamless integration with speech processing models like Whisper, LLaMA, and text-to-speech systems.</p> <p>The library provides a robust C++ interface for: - Real-time audio streaming to and from edge servers - Integration with speech-to-text (Whisper), language models (LLaMA), and text-to-speech services - Low-latency voice chat capabilities optimized for edge computing - Efficient binary protocols for audio transmission - Cross-platform support for voice-enabled applications</p> <p>Key Features - Bidirectional audio streaming with configurable quality settings - Asynchronous communication with edge AI services - Built-in support for common audio formats and codecs - Minimal dependencies and small footprint - Comprehensive error handling and connection management - Simple API for voice chat applications</p>"},{"location":"overview/#api","title":"API","text":"<p>The library API consists of the following functions:</p> <p>The comments above the functions describe fairly well what each function does. Here some additional notes;</p>"},{"location":"overview/#cmake-integration","title":"CMake integration","text":"<p>This project uses CMake for generating the build files. The CMakeLists is configured as follows:</p>"},{"location":"overview/#targets","title":"Target(s)","text":"<p>TODO</p>"},{"location":"overview/#configuration-options","title":"Configuration options","text":"<p>TODO</p>"},{"location":"overview/#integrating-it-into-your-own-project","title":"Integrating it into your own project","text":"<p>Here are some CMake snippets which indicate how this project might be included into your own CMake project.</p> <p>TODO</p>"},{"location":"contributing/license/","title":"License","text":"<p>This work is licensed under the apache-2.0 license.</p>"},{"location":"contributing/rules/","title":"Contribution rules","text":"<p>For contributing we recommend creating a fork and when ready a pull request to merge the changes with this repository.  In the pull request please state:</p> <ul> <li>What has been added/changed?</li> <li>Some reasoning about implementation details</li> </ul> <p>Please don't do refactors without consent of administrators  as we will not merge them."},{"location":"contributing/rules/#new-features","title":"New features","text":"<p>If you have any cool feature/idea to add to the code, please start an issue in GitHub to introduce the idea to the maintainers.</p>"},{"location":"usage/demo/","title":"Demo fragment","text":"<p>The Demo that comes with this library demonstrates using a microphone.</p>"},{"location":"usage/demo/#set-up-build-environment-on-linux","title":"Set-up build environment on Linux","text":"<p>Linux is one of the easiest os'es to set-up as most packages and libraries can be found in the package repositories.</p>"},{"location":"usage/demo/#ubuntu-and-debian","title":"Ubuntu and Debian","text":"<pre><code>sudo apt-get update &amp;&amp; sudo apt-get install build-essential cmake ninja-build libsdl2-2.0-0 libsdl2-dev\n</code></pre> <p>If you have not installed VSCode yet, do not install using APT in ubuntu as it will install the sandboxed snap version.</p> <p>Which has many issues due to the sandbox environment</p> <p>Use this guide instead, which installs it using the APT repository from Microsoft themselves.</p>"},{"location":"usage/demo/#compiling-and-running-the-example","title":"Compiling and running the example","text":"<p>The library contains an example demonstrating the usage and functionality of this library. </p> <p>To compile and run this example:</p> <ol> <li> <p>Clone this repo: <pre><code>git clone https://github.com/HCL-Hbot/edge-vox.git\n</code></pre></p> </li> <li> <p>Open the cloned repo folder in vscode; <code>File-&gt;Open Folder</code></p> </li> <li> <p>Select Ninja as build generator by pressing CRTL+SHIFT+P-&gt;\"CMake: Open CMake Tools Extension Settings\"-&gt;\"@ext:ms-vscode.cmake-tools generator\"    Now type Ninja (with capital N into the generator field!).    </p> </li> <li> <p>Select the <code>GCC kit</code>by pressing CTRL+SHIFT+p and selecting <code>CMake: Select a kit</code>.    </p> </li> <li> <p>TODO</p> </li> </ol>"}]}